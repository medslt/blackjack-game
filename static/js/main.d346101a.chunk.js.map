{"version":3,"sources":["components/Main.module.css","components/Wallet.module.css","components/Card.module.css","components/Hand.module.css","components/Table.module.css","utils/getFullDeck.js","storeManagement/storeContext.js","storeManagement/actions/index.js","utils/getRandomCard.js","utils/getCount.js","utils/drawDealerCards.js","storeManagement/reducer/standReducer.js","utils/getWinner.js","storeManagement/reducer/updateGameReducer.js","utils/getFirstCards.js","storeManagement/reducer/index.js","storeManagement/reducer/hitReducer.js","storeManagement/reducer/placeBetReducer.js","storeManagement/StoreProvider.js","components/Wallet.js","components/Card.js","components/Hand.js","components/Table.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","deck","storeContext","createContext","standAction","dispatch","type","hitAction","updateGameAction","wallet","payload","placeBetAction","newCurrentBet","updateMessageAction","message","getFullDeck","suits","cards","i","length","j","push","number","suit","getRandomCard","updatedDeck","randomIndex","Math","floor","random","randomCard","splice","getCount","rearranged","forEach","card","unshift","reduce","total","drawDealerCard","dealer","newDealer","JSON","parse","stringify","count","standReducer","state","gameOver","newdeck","drawedDealer","pop","tmpDraw","drawDealerCards","newWallet","currentBet","winner","player","getWinner","updateGameReducer","action","playerCard1","dealerCard1","playerCard2","playerStartingHand","dealerStartingHand","getFirstCards","reducer","hitReducer","placeBetReducer","Provider","initialState","StoreProvider","children","useReducer","actions","stand","hit","updateGame","placeBet","updateMessage","dispatchEvent","buildAction","value","memo","inputEl","useRef","useContext","className","styles","ref","btn","onClick","current","btns","newDeck","color","combo","Hand","handCards","map","key","Table","table","useEffect","startNewGame","main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d346101a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__d0wD2\",\"message\":\"Main_message__2YoB7\",\"btns\":\"Main_btns__1mLKo\",\"btn\":\"Main_btn__2YyNL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wallet\":\"Wallet_wallet__1HNjp\",\"placeBet\":\"Wallet_placeBet__1CHjm\",\"btns\":\"Wallet_btns__KkTis\",\"btn\":\"Wallet_btn__3kvzp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3F8np\",\"cardRed\":\"Card_cardRed__1Sh66\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"handCards\":\"Hand_handCards__1l6Do\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__3M_gK\"};","let deck;\n\nconst getFullDeck = () => {\n    if (!deck) {\n        const suits = ['♦','♣','♥','♠'];\n        const cards = [2,3,4,5,6,7,8,9,10,'J','Q','K','A'];\n        deck = [];\n\n        for (let i = 0; i < cards.length; i++) {\n          for (let j = 0; j < suits.length; j++) {\n            deck.push({number: cards[i], suit: suits[j]});\n          }\n        }\n    }\n    return deck;\n  }\n\nexport {getFullDeck};","import {createContext} from 'react';\n\nconst storeContext = createContext();\n\nexport default storeContext;","\nconst standAction = (dispatch) => () => {\n    dispatch({type: 'STAND'});\n}\n\nconst hitAction = (dispatch) => () => {\n    dispatch({type: 'HIT'});\n}\n\nconst updateGameAction = (dispatch) => (deck, wallet) => {\n    const payload = {deck, wallet}\n    dispatch({type: 'UPDATE_GAME', payload});\n}\n\nconst placeBetAction = (dispatch) => (newCurrentBet) => {\n    const payload = {newCurrentBet}\n    dispatch({type: 'PLACE_BET', payload});\n}\n\nconst updateMessageAction = (dispatch) => (message) => {\n    const payload = {message}\n\n    dispatch({type: 'UPDATE_MESSAGE', payload});\n}\nconst buildAction = (dispatch) => {\n    return {\n        stand: standAction(dispatch),\n        hit: hitAction(dispatch),\n        updateGame: updateGameAction(dispatch),\n        placeBet: placeBetAction(dispatch),\n        updateMessage: updateMessageAction(dispatchEvent),\n    }\n}\n\nexport {buildAction};","const getRandomCard = (deck) =>{\n    const updatedDeck = [...deck];\n\n    const randomIndex = Math.floor(Math.random() * updatedDeck.length);\n    const randomCard = updatedDeck[randomIndex];\n      // remove random card from deck\n      \n    updatedDeck.splice(randomIndex, 1);\n    return { randomCard, updatedDeck };\n  }\n\n  \nexport {getRandomCard};\n\n","const getCount = (cards) => {\n    const rearranged = [];\n\n    cards.forEach(card => {\n      if (card.number === 'A') {\n        rearranged.push(card);\n      } else if (card.number) {\n        rearranged.unshift(card);\n      }\n    });\n    \n    const count =  rearranged.reduce((total, card) => {\n      if (card.number === 'J' || card.number === 'Q' || card.number === 'K') {\n          return total + 10;\n      }\n\n      if (card.number === 'A') {\n          return (total + 11 <= 21) ? total + 11 : total + 1;\n      }\n\n      return total + card.number;\n    }, 0);\n\n    return count;\n  }\n\n\nexport {getCount};","import {getCount, getRandomCard} from './';\n\nconst drawDealerCard = (dealer, deck)  =>{\n    const { randomCard, updatedDeck } = getRandomCard(deck);\n  \n    //Deep clone\n    const newDealer = JSON.parse(JSON.stringify(dealer));\n    \n    newDealer.cards.push(randomCard);\n    newDealer.count = getCount(newDealer.cards);\n\n    return { dealer: newDealer, updatedDeck };\n  }\n  \n\nconst drawDealerCards = (dealer, deck) => {\n    // Show dealer's 2nd card\n    const randomCard = getRandomCard(deck);\n    let newdeck = randomCard.updatedDeck;\n    \n    //Deep clone\n    let drawedDealer = JSON.parse(JSON.stringify(dealer));\n    //remove the empty card\n    drawedDealer.cards.pop();\n    drawedDealer.cards.push(randomCard.randomCard);\n    drawedDealer.count = getCount(drawedDealer.cards);\n\n    // Keep drawing cards until count is 17\n    while(drawedDealer.count < 17) {\n    const tmpDraw = drawDealerCard(drawedDealer, newdeck);\n\n    drawedDealer = tmpDraw.dealer;\n    newdeck = tmpDraw.updatedDeck;\n    }\n\n    return {deck: newdeck, dealer: drawedDealer}\n}\n\n\nexport {drawDealerCards};","import {\n    getWinner,\n    drawDealerCards\n} from '../../utils';\n\nconst standReducer = (state) => {\n    if (state.gameOver) {\n        return({ message: 'Game over! Please start a new game.' });\n    } \n    const {deck, dealer} = drawDealerCards(state.dealer, state.deck)\n    let newWallet = state.wallet;\n    let message; \n\n    if (dealer.count > 21) {\n        newWallet = state.wallet + state.currentBet * 2;\n        message = 'Dealer bust! You win!'\n    } else {\n        const winner = getWinner(dealer, state.player);\n        if (winner === 'dealer') {\n            message = 'Dealer wins...';\n        } else if (winner === 'player') {\n            newWallet += state.wallet + state.currentBet * 2;\n            message = 'You win!';\n        } else {\n            newWallet += state.currentBet;\n            message = 'Push.';\n        }\n    } \n\n    return {\n        deck,\n        dealer,\n        wallet: newWallet,\n        gameOver: true,\n        message,\n    };\n}\n\nexport {standReducer};","const getWinner = (dealer, player) => {\n    if (dealer.count > player.count) {\n        return 'dealer';\n    } \n\n    if (dealer.count < player.count) {\n        return 'player';\n    } \n    \n    return 'push';\n}\n\nexport {getWinner};","import {getFirstCards} from '../../utils';\nconst updateGameReducer = (state, action) => {\n    const {deck, wallet } = action.payload\n    const { updatedDeck, player, dealer } = getFirstCards(deck);\n\n    return {\n        deck: updatedDeck,\n        dealer,\n        player,\n        wallet,\n        currentBet: null,\n        gameOver: false,\n        message: null\n      };\n}\n\n\nexport {updateGameReducer};","import {getCount, getRandomCard} from './';\n\nconst getFirstCards = (deck) => {\n    const playerCard1 = getRandomCard(deck);\n    const dealerCard1 = getRandomCard(playerCard1.updatedDeck);\n    const playerCard2 = getRandomCard(dealerCard1.updatedDeck);    \n    \n    const playerStartingHand = [playerCard1.randomCard, playerCard2.randomCard];\n    const dealerStartingHand = [dealerCard1.randomCard, {}];\n    \n    const player = {\n        cards: playerStartingHand,\n        count: getCount(playerStartingHand)\n    };\n\n    const dealer = {\n        cards: dealerStartingHand,\n        count: getCount(dealerStartingHand)\n    };\n    \n    return {updatedDeck: playerCard2.updatedDeck, player, dealer};\n}\n\n\nexport {getFirstCards};","import {standReducer} from './standReducer';\nimport {updateGameReducer} from './updateGameReducer';\nimport {hitReducer} from './hitReducer';\nimport {placeBetReducer} from './placeBetReducer';\n\nconst  reducer = (state, action) => {\n    switch (action.type) {\n        case 'STAND':\n            return {...state, ...standReducer(state)};\n        case 'HIT':\n            return {...state, ...hitReducer(state)};\n        case 'UPDATE_GAME': \n            return {...state, ...updateGameReducer(state, action)};\n        case 'PLACE_BET':\n            return {...state, ...placeBetReducer(state, action)}\n        case 'UPDATE_MESSAGE': \n            const {message} = action.payload;\n\n            return {...state, message}\n        default:\n            break;\n    }\n  }\n\nexport {reducer};","import {\n    getRandomCard,\n    getCount\n} from '../../utils';\n\nconst hitReducer = (state) => {\n    if (state.gameOver) {\n        return({ message: 'Game over! Please start a new game.' });\n    } \n\n    if (!state.currentBet) {\n        return ({ message: 'Please place bet.' });\n    } \n\n    const { randomCard, updatedDeck } = getRandomCard(state.deck);\n\n    //Deep clone\n    const player = JSON.parse(JSON.stringify(state.player));\n\n    player.cards.push(randomCard);\n    player.count = getCount(player.cards);\n\n    if (player.count > 21) {\n        // GAME OVER\n        return({ player, gameOver: true, message: 'YOU BUST!' });\n    } \n    \n    return({ deck: updatedDeck, player });\n}\n\n\nexport {hitReducer};","const placeBetReducer = (state, action) => {\n    const {newCurrentBet } = action.payload\n    const { wallet} = state;\n\n    if (newCurrentBet > wallet) {\n        return {message: 'Insufficient funds to bet that amount.'};\n    }  \n    if (newCurrentBet % 1 !== 0) {\n        return {message: 'Please bet whole numbers only.'};\n    } \n    const newWallet = wallet - newCurrentBet;\n\n    return {\n        wallet: newWallet,\n        currentBet: newCurrentBet\n    }\n}\n\n\nexport {placeBetReducer};","import React, {useReducer} from 'react';\nimport storeContext from './storeContext';\nimport {buildAction} from './actions';\nimport {reducer} from './reducer'\nconst {Provider} = storeContext;\n\n\nconst initialState = { \n    deck: [],\n    dealer: null,\n    player: null,\n    wallet: 0,\n    currentBet: null,\n    gameOver: false,\n    message: null\n};\n\nconst StoreProvider = ({children}) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const actions = buildAction(dispatch);\n \n    return (\n        <Provider value={{state, actions}}>\n            {children}\n        </Provider>\n    )\n};\n\n\nexport default StoreProvider;\n\n","import React, {useRef, useContext, memo} from 'react';\nimport storeContext from '../storeManagement/storeContext';\nimport {getFullDeck} from '../utils';\nimport styles from './Wallet.module.css';\n\nconst Wallet = () => {\n    const inputEl = useRef(null);\n    const {state, actions} = useContext(storeContext);\n\n    const {wallet, currentBet, gameOver, deck} = state;\n\n    const onClickPlaceBetBtn= () => {\n        const newCurrentBet = +inputEl.current.value;\n  \n        actions.placeBet(newCurrentBet);\n    }\n\n    const continueGame = () => {\n        if (wallet > 0) {\n            const newDeck = (deck.length < 10) ? getFullDeck() : deck;\n            actions.updateGame(newDeck, wallet);\n        } else {\n            actions.updateMessage('Game over! Please start a new game.');\n        }\n    }\n    \n    return (\n        <div className={styles.wallet}>\n            <p>Wallet: £{ wallet }</p>\n            {\n                !currentBet &&\n                <div className={styles.placeBet}>            \n                    <input type=\"text\" ref={inputEl}/>\n                    <button className={styles.btn} onClick={onClickPlaceBetBtn}>Place Bet</button>\n                </div>\n                \n            }\n            {\n                gameOver &&\n                <div className={styles.btns}>\n                    <button className={styles.btn} onClick={continueGame}>Continue</button>\n                </div>\n                \n            }\n        </div>\n    )\n}\n\nexport default memo(Wallet);","import React, {memo} from 'react';\nimport styles from './Card.module.css';\n\nconst Card = ({ number, suit }) => {\n    const color = (suit === '♦' || suit === '♥') ? 'cardRed' : 'card';\n    const combo = (number) ? `${number}${suit}` : null;\n    \n    return (\n        <div className={styles[color]}>\n            { combo }\n        </div>\n    );\n  };\n\n\nexport default memo(Card);","import React from 'react';\nimport Card from './Card';\nimport styles from './Hand.module.css';\n\nconst Hand = ({cards}) => {\n    return (\n        <div className={styles.handCards}>\n            { cards.map((card, i) => (<Card key={i} number={card.number} suit={card.suit}/>)) }\n        </div>\n    )\n}\n\n\nexport default Hand;","import React from 'react';\nimport Hand from './Hand';\nimport styles from './Table.module.css';\n\nconst Table = ({player, dealer}) => {\n    return (\n        <div className={styles.table}>\n            <h3>Dealer's Hand ({ dealer.count })</h3>\n            <Hand cards={dealer.cards}/>\n\n            <h3>Your Hand ({ player.count })</h3>\n            <Hand cards={player.cards}/>\n        </div>\n    )\n}\n\nexport default Table;","import React, {useContext, memo, useEffect} from 'react';\nimport storeContext from '../storeManagement/storeContext';\nimport Wallet from './Wallet';\nimport Table from './Table';\nimport { getFullDeck } from '../utils';\n\nimport styles from './Main.module.css';\n\nconst Main = () => {\n    const {state, actions} = useContext(storeContext);\n    const {player, dealer, message} = state;\n\n    useEffect(() => {\n        startNewGame();\n    },[])\n\n    const startNewGame = () => {\n        const deck = getFullDeck();\n        actions.updateGame(deck, 100);\n    }\n\n    if (player === null) {\n        return null\n    }\n\n    return (\n        <div className={styles.main}>\n        <h2 className={styles.message}>{message }</h2>\n        <div className={styles.btns}>\n            <button className={styles.btn} onClick={actions.hit}>Hit</button>\n            <button className={styles.btn} onClick={actions.stand}>Stand</button>\n            <button className={styles.btn} onClick={startNewGame}>New Game</button>\n        </div>\n        <Wallet/>\n        <Table player={player} dealer={dealer}/>\n        </div>\n    ) \n}\n\n  export default memo(Main);","import React from 'react';\nimport StoreProvider from './storeManagement/StoreProvider';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <StoreProvider>\n        <Main/>\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}